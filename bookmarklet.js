(function() { if (document.getElementById('driftBossModMenu')) return; // Disable pointer events on all canvases so menu can be dragged outside game const canvases = document.querySelectorAll('canvas'); canvases.forEach(c => c.style.pointerEvents = 'none'); // Create menu container const menu = document.createElement('div'); menu.id = 'driftBossModMenu'; menu.style.cssText = ` position: fixed !important; top: 20px !important; left: 20px !important; width: 320px; background: #1a1a1a; color: white; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; border-radius: 10px; box-shadow: 0 0 15px rgba(0,0,0,0.8); padding: 20px; user-select: none; z-index: 2147483647 !important; cursor: grab; `; // Title bar with close button const titleBar = document.createElement('div'); titleBar.style.cssText = ` display: flex; justify-content: space-between; align-items: center; font-weight: bold; font-size: 18px; margin-bottom: 15px; cursor: grab; `; titleBar.innerHTML = `<span>Drift Boss Mod Menu</span><span style="cursor:pointer;">&#10005;</span>`; menu.appendChild(titleBar); // Close button functionality titleBar.lastElementChild.onclick = () => { menu.remove(); canvases.forEach(c => c.style.pointerEvents = 'auto'); // Restore canvas pointer events }; // Dragging variables let isDragging = false; let dragStartX = 0, dragStartY = 0; let initialLeft = 0, initialTop = 0; // Drag start titleBar.addEventListener('mousedown', e => { // Prevent drag if clicking input/button/label inside menu if (['INPUT', 'BUTTON', 'LABEL', 'SELECT', 'TEXTAREA'].includes(e.target.tagName)) return; isDragging = true; dragStartX = e.clientX; dragStartY = e.clientY; initialLeft = menu.offsetLeft; initialTop = menu.offsetTop; menu.style.cursor = 'grabbing'; e.preventDefault(); }); // Drag move window.addEventListener('mousemove', e => { if (!isDragging) return; let newLeft = initialLeft + (e.clientX - dragStartX); let newTop = initialTop + (e.clientY - dragStartY); // Constrain inside viewport newLeft = Math.min(Math.max(newLeft, 0), window.innerWidth - menu.offsetWidth); newTop = Math.min(Math.max(newTop, 0), window.innerHeight - menu.offsetHeight); menu.style.left = newLeft + 'px'; menu.style.top = newTop + 'px'; }); // Drag end window.addEventListener('mouseup', () => { if (isDragging) { isDragging = false; menu.style.cursor = 'grab'; } }); // Form container const form = document.createElement('form'); form.style.cssText = ` display: flex; flex-direction: column; gap: 12px; `; // Inputs config const inputs = [ { id: 'coins', label: 'Coins', type: 'number', value: 9999 }, { id: 'score', label: 'Score', type: 'number', value: 5000 }, { id: 'double', label: 'Double Score', type: 'number', value: 5 }, { id: 'insurance', label: 'Insurance', type: 'number', value: 5 }, { id: 'boost', label: 'Coin Boost', type: 'number', value: 5 } ]; inputs.forEach(({id, label, type, value}) => { const container = document.createElement('div'); container.style.display = 'flex'; container.style.flexDirection = 'column'; const labelEl = document.createElement('label'); labelEl.htmlFor = id; labelEl.textContent = label; labelEl.style.marginBottom = '4px'; const inputEl = document.createElement('input'); inputEl.type = type; inputEl.id = id; inputEl.value = value; inputEl.min = '0'; inputEl.style.padding = '8px'; inputEl.style.borderRadius = '6px'; inputEl.style.border = 'none'; inputEl.style.background = '#333'; inputEl.style.color = 'white'; inputEl.style.fontSize = '14px'; container.appendChild(labelEl); container.appendChild(inputEl); form.appendChild(container); }); // Speed slider const speedContainer = document.createElement('div'); speedContainer.style.display = 'flex'; speedContainer.style.flexDirection = 'column'; const speedLabel = document.createElement('label'); speedLabel.htmlFor = 'speed'; speedLabel.textContent = 'Speed Mod'; speedLabel.style.marginBottom = '4px'; const speedInput = document.createElement('input'); speedInput.type = 'range'; speedInput.id = 'speed'; speedInput.min = '1'; speedInput.max = '10'; speedInput.value = '5'; speedInput.style.width = '100%'; const speedValue = document.createElement('div'); speedValue.textContent = 'Speed: 5'; speedValue.style.textAlign = 'right'; speedValue.style.fontSize = '12px'; speedValue.style.color = '#ccc'; speedInput.addEventListener('input', () => { speedValue.textContent = `Speed: ${speedInput.value}`; }); speedContainer.appendChild(speedLabel); speedContainer.appendChild(speedInput); speedContainer.appendChild(speedValue); form.appendChild(speedContainer); // Buttons container const buttonsContainer = document.createElement('div'); buttonsContainer.style.display = 'flex'; buttonsContainer.style.justifyContent = 'space-between'; buttonsContainer.style.marginTop = '15px'; // Apply button const applyBtn = document.createElement('button'); applyBtn.type = 'submit'; applyBtn.textContent = 'Apply'; applyBtn.style.flex = '1'; applyBtn.style.marginRight = '8px'; applyBtn.style.background = '#00d8ff'; applyBtn.style.border = 'none'; applyBtn.style.borderRadius = '8px'; applyBtn.style.color = '#1a1a1a'; applyBtn.style.fontWeight = 'bold'; applyBtn.style.cursor = 'pointer'; applyBtn.style.padding = '10px'; // Reset button const resetBtn = document.createElement('button'); resetBtn.type = 'button'; resetBtn.textContent = 'Reset'; resetBtn.style.flex = '1'; resetBtn.style.background = '#ff4d4d'; resetBtn.style.border = 'none'; resetBtn.style.borderRadius = '8px'; resetBtn.style.color = 'white'; resetBtn.style.fontWeight = 'bold'; resetBtn.style.cursor = 'pointer'; resetBtn.style.padding = '10px'; buttonsContainer.appendChild(applyBtn); buttonsContainer.appendChild(resetBtn); form.appendChild(buttonsContainer); // Apply changes handler form.addEventListener('submit', e => { e.preventDefault(); const key = { sound: 0.7, music: 0.3, score: Number(form.querySelector('#score').value), hasShownTutorial: true, collectedCoin: Number(form.querySelector('#coins').value), cars: Array.from({length: 27}, (_, i) => i), currentCar: 0, currentTip: 0, booster1: Number(form.querySelector('#double').value), booster2: Number(form.querySelector('#insurance').value), booster3: Number(form.querySelector('#boost').value), ko: 0, speed: Number(form.querySelector('#speed').value), hasShownBoosterTutorial: true }; localStorage.setItem("mjs-drift-boss-game-v1.0.1-dailyreward", JSON.stringify(key)); alert('Game values applied! Reloading...'); location.reload(); }); // Reset handler resetBtn.addEventListener('click', () => { if (confirm('Are you sure you want to reset all game progress? This cannot be undone.')) { localStorage.removeItem("mjs-drift-boss-game-v1.0.1-dailyreward"); alert('Game reset! Reloading...'); location.reload(); } }); menu.appendChild(form); document.body.appendChild(menu); })();
